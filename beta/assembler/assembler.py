import os
from tempfile import gettempdir, mktemp

from .resolver import ByteGenerator
from beta.parsing.parse_util import parse_file


def assemble(filepath):
    """
    Parameters
    ----------
    filepath: str
        Path to the assembly file

    Returns
    -------
    bytes: list
        List of generated bytes (in order)
    breakpoints: set
        Set of byte addresses where breakpoints were found
    """
    generator = ByteGenerator()
    syntax_tree, _ = parse_file(filepath, parsed_files=[filepath])
    bytes = generator.generate(syntax_tree)
    return bytes, generator.breakpoints


def assemble_str(beta: str):
    """
    Parameters
    ----------
    beta: str
        Beta assembly code as a string

    Returns
    -------
    bytes: list
        List of generated bytes (in order)
    breakpoints: set
        Set of byte addresses where breakpoints were found
    """
    filename = mktemp(prefix="beta", dir=gettempdir())
    filepath = os.path.join(gettempdir(), filename)
    try:
        with open(filepath, "w+") as file:
            file.write(beta)
        return assemble(filepath)
    except Exception as e:
        raise e
    finally:
        if os.path.isfile(filepath):
            os.remove(filepath)



